By implementing special methods, your objects can behave like the built-in types, enabling
the expressive coding style the community considers Pythonic.

A basic requirement for a Python object is to provide usable string representations of
itself, one used for debugging and logging, another for presentation to end users. That
is why the special methods __repr__ and __str__ exist in the data model.

Emulating sequences, as shown with the FrenchDeck example, is one of the most widely
used applications of the special methods. Making the most of sequence types is the
subject of Chapter 2, and implementing your own sequence will be covered in Chapter
10 when we create a multidimensional extension of the Vector class.

Thanks to operator overloading, Python offers a rich selection of numeric types, from
the built-ins to decimal.Decimal and fractions.Fraction, all supporting infix arithmetic
operators. Implementing operators, including reversed operators and augmented
assignment, will be shown in Chapter 13 via enhancements of the Vector example.

The use and implementation of the majority of the remaining special methods of the
Python data model is covered throughout this book.